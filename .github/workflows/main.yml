name: Deploy to ECR
# updated ECR Repo week3-1
on: 
  push:
    branches: [ dev ]

jobs:

  build:

    name: Build Image
    runs-on: ubuntu-latest


    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, test, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_APP_REPOSITORY: clo835-jcaranay-assignment1-app-repo
        ECR_DB_REPOSITORY: clo835-jcaranay-assignment1-db-repo
        DOCKER_NETWORK: local_network
        IMAGE_TAG: v0.2
        APP_COLOR: blue
      run: |
        ls -ltra
        # Docker build command
        # Database
        echo Build Database and Application
        docker build -t db_img -f Dockerfile_mysql . 
        docker build -t app_img -f Dockerfile . 


        # Create network
        echo Create Bridge Network
        docker network create -d bridge --subnet 192.168.100.0/24 --gateway 192.168.100.1 $DOCKER_NETWORK


        # Spawn containers

        # Spawn Database container and store container ID

        # Run the Docker container and capture the container ID in the variable DBCONID
        echo Run Database
        DBCONID=$(docker run -d -e MYSQL_ROOT_PASSWORD="${{ secrets.DBPWD }}" --network "${DOCKER_NETWORK}" --name db_container db_img)

        # Get DB IPAddress
        DBHOST=$(docker inspect -f {{'.NetworkSettings.Networks.local_network.IPAddress'}} $DBCONID)

        sleep 10

        docker ps
        docker ps -a
        
        
        # Run application container
        echo Run Application
        docker run -p 8080:8080 \
        -e APP_COLOR=$APP_COLOR \
        -e DBHOST=$DBHOST \
        -e DBPORT=${{ secrets.DBPORT }} \
        -e DBUSER=${{ secrets.DBUSER }} \
        -e DBPWD=${{ secrets.DBPWD }} \
        --network "${DOCKER_NETWORK}" --name app_container app_img

 

        # Unit test
        docker ps
        echo "Pause for 10 seconds to let container start"
        sleep 10
        curl localhost:8080 -vvv

        # Push image to ECR REPO DB and APP
        docker push db_img $ECR_REGISTRY/$ECR_DB_REPOSITORY:$IMAGE_TAG
        docker push app_img $ECR_REGISTRY/$ECR_APP_REPOSITORY:$IMAGE_TAG